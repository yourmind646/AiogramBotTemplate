# Aiogram imports
import aiogram.types as types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import Router, F

# Bot
from create_bot import bot

# Keyboards
from keyboards.admin_mailer_kbs import *

# DB
from database.orm import ORM as orm

# States
from states.main_states import AdminStates, AdminMailerStates

# Funcs
from handlers.admin.main import show_admin_menu

admin_mailer_router = Router()


@admin_mailer_router.message(F.text == "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", StateFilter(AdminStates.main))
@admin_mailer_router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥", StateFilter(AdminMailerStates))
async def process_mailer_post(message: types.Message, state: FSMContext):

	msg_text = "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"

	await message.answer(
		text = msg_text,
		reply_markup = get_back_to_main_kb()
	)

	await state.set_state(AdminMailerStates.post)


@admin_mailer_router.message(StateFilter(AdminMailerStates.post))
async def process_mailer_ikb(message: types.Message, state: FSMContext):

	await state.update_data(admin_mailer_post = message.message_id)

	msg_text = "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ù–ê–ó–í–ê–ù–ò–ï + –°–°–´–õ–ö–ê</b>:"

	await message.answer(
		text = msg_text,
		reply_markup = get_skip_kb()
	)

	await state.set_state(AdminMailerStates.ikb)


@admin_mailer_router.message(F.text, StateFilter(AdminMailerStates.ikb))
async def process_mailer_preview(message: types.Message, state: FSMContext):

	ikb = message.text.split("\n") if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
	await state.update_data(admin_mailer_ikb = ikb)

	state_data = await state.get_data()
	post = state_data.get("admin_mailer_post")

	await message.answer(
		text = "‚úâÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:",
		reply_markup = get_mailer_finish_kb()
	)

	try:
		await bot.copy_message(
			chat_id = message.from_user.id,
			from_chat_id = message.from_user.id,
			message_id = post,
			reply_markup = get_mailer_btn_ikb(buttons_preset = ikb)
		)
	except:
		await message.answer(
			text = "üî¥ –û—à–∏–±–∫–∞!"
		)
		await process_mailer_post(message, state)
		return

	await state.set_state(AdminMailerStates.preview)


@admin_mailer_router.message(F.text == "üü¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", StateFilter(AdminMailerStates.preview))
async def process_mailer_finish(message: types.Message, state: FSMContext):

	state_data = await state.get_data()
	ikb = state_data.get("admin_mailer_ikb")
	post = state_data.get("admin_mailer_post")
	
	all_users = await orm.get_all_users()

	# info
	await message.answer(
		text = "‚ñ∂Ô∏è‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞..."
	)

	# reset mailer config
	await state.clear()

	# back to main menu
	await show_admin_menu(message, state)

	counter = 0
	for user in all_users:
		try:
			await bot.copy_message(
				chat_id = user.user_id,
				from_chat_id = message.from_user.id,
				message_id = post,
				reply_markup = get_mailer_btn_ikb(buttons_preset = ikb)
			)
			counter += 1
		except:
			pass

	await message.answer(
		text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {counter}/{len(all_users)}."
	)
