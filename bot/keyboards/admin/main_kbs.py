# Aiogram imports
from aiogram.utils.keyboard import ReplyKeyboardBuilder, KeyboardButton, InlineKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton


def get_main_menu_kb():

	builder = ReplyKeyboardBuilder()

	builder.row(
		KeyboardButton(text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
		KeyboardButton(text = "‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞")
	)

	builder.row(
		KeyboardButton(text = "üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"),
		KeyboardButton(text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
	)

	builder.row(
		KeyboardButton(text = "üìë –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
		KeyboardButton(text = "üëÆ‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
	)

	builder.row(
		KeyboardButton(text = "üîö –í—ã–π—Ç–∏")
	)

	return builder.as_markup(resize_keyboard = True, is_persistent = True)


def get_add_admins_kb():

	builder = ReplyKeyboardBuilder()

	builder.row(
		KeyboardButton(text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
		KeyboardButton(text = "‚ûñ –£–¥–∞–ª–∏—Ç—å")
	)

	builder.row(
		KeyboardButton(text = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
	)

	return builder.as_markup(resize_keyboard = True, is_persistent = True)


def get_back_kb():

	builder = ReplyKeyboardBuilder()

	builder.row(
		KeyboardButton(text = "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
	)

	return builder.as_markup(resize_keyboard = True)


def get_settings_kb() -> ReplyKeyboardMarkup:

	builder = ReplyKeyboardBuilder()

	builder.add(
		KeyboardButton(text = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
	)
	builder.adjust(2)

	return builder.as_markup(resize_keyboard = True, is_persistent = True)


def get_blacklist_kb():

	builder = ReplyKeyboardBuilder()

	builder.row(
		KeyboardButton(text = "üëÅ –û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫")
	)

	builder.row(
		KeyboardButton(text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
		KeyboardButton(text = "‚ûñ –£–¥–∞–ª–∏—Ç—å")
	)

	builder.row(
		KeyboardButton(text = "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
	)

	return builder.as_markup(resize_keyboard = True, is_persistent = True)


def get_bookList_ikb(prefix: str, offset: int, max_offset: int, items: list[tuple], element_col: int = 10) -> InlineKeyboardMarkup:
	
	builder = InlineKeyboardBuilder()

	for item_id, item_name in items[offset * element_col:(offset + 1) * element_col]:
		builder.row(InlineKeyboardButton(text = f"{item_name}", callback_data = f"{prefix}_pick_{item_id}"))

	builder.row(
		InlineKeyboardButton(text = "‚¨ÖÔ∏è", callback_data = f"{prefix}_prev"),
		InlineKeyboardButton(text = "‚û°Ô∏è", callback_data = f"{prefix}_next")
	)

	return builder.as_markup()
