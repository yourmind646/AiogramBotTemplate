# Aiogram imports
import aiogram.types as types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import Router, F
from aiogram.exceptions import TelegramBadRequest

# Const
from create_bot import bot, storage, StorageKey, orm

# Keyboards
from keyboards.admin.main_kbs import *

# States
from states.admin_states import AdminStates, AdminManagementStates

# Config
from decouple import config

# Another
from contextlib import suppress


# Init
admin_management_router = Router()


@admin_management_router.message(F.text == "üëÆ‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", StateFilter(AdminStates.main))
@admin_management_router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥", StateFilter(AdminManagementStates))
async def cmd_management(message: types.Message, state: FSMContext):

	admins = await orm.get_all_admins()

	msg_text = "<i>üëÆ‚Äç‚ôÇÔ∏è –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</i>\n"

	for admin in admins:
		msg_text += f"‚ú¶ [<code>{admin.user_id}</code>]: {admin.username if admin.username else admin.fullname}\n"

	msg_text += f"\n<b>üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"

	await message.answer(
		text = msg_text,
		reply_markup = get_add_admins_kb()
	)

	await state.set_state(AdminManagementStates.main)


#*############################
#*#           ADD            #
#*############################


@admin_management_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å", StateFilter(AdminManagementStates.main))
async def cmd_management_add_id(message: types.Message, state: FSMContext):

	msg_text = "‚ûï –í–≤–µ–¥–∏—Ç–µ User ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:"

	await message.answer(
		text = msg_text,
		reply_markup = get_back_kb()
	)

	await state.set_state(AdminManagementStates.add_admin)


@admin_management_router.message(F.text, StateFilter(AdminManagementStates.add_admin))
async def cmd_management_add_finish(message: types.Message, state: FSMContext):

	# validation
	if not message.text.isdigit():
		await message.answer(
			text = "‚õîÔ∏è –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
			reply_markup = get_back_kb()
		)
		return

	user_id = int(message.text)

	if not await orm.is_user_exists(user_id):
		await message.answer(
			text = "‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
			reply_markup = get_back_kb()
		)
		return
	
	user = await orm.get_user(user_id)
	await orm.create_admin(user.user_id, user.username, user.fullname)
	await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
	await cmd_management(message, state)


#*############################
#*#          DELETE          #
#*############################


@admin_management_router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å", StateFilter(AdminManagementStates.main))
async def cmd_management_delete(message: types.Message, state: FSMContext):

	msg_text = "‚ûñ –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

	await message.answer(
		text = msg_text,
		reply_markup = get_back_kb()
	)

	await state.set_state(AdminManagementStates.del_admin)


@admin_management_router.message(F.text, StateFilter(AdminManagementStates.del_admin))
async def cmd_management_delete_finish(message: types.Message, state: FSMContext):

	# validation
	if not message.text.isdigit():
		await message.answer(
			text = "‚õîÔ∏è –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:"
		)
		return

	user_id = int(message.text)

	if user_id == int(config("BASE_ADMIN")):
		await message.answer(
			text = "‚õîÔ∏è –û—Ç–∫–∞–∑–∞–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
			reply_markup = get_back_kb()
		)
		return

	if not await orm.is_admin_exists(user_id):
		await message.answer(
			text = "‚õîÔ∏è –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:"
		)
		return
	
	# change admin state
	with suppress(TelegramBadRequest):
		await bot.send_message(
			chat_id = user_id,
			text = "‚òπÔ∏è –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!",
			reply_markup = types.ReplyKeyboardRemove()
		)

	await storage.set_state(key = StorageKey(bot_id = bot.id, chat_id = user_id, user_id = user_id), state = None)
	await orm.delete_admin(user_id)
	await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
	await cmd_management(message, state)
