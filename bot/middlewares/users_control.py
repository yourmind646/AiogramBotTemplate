from aiogram import types
from aiogram import BaseMiddleware
from datetime import datetime, timedelta, timezone
from collections import deque
import asyncio

# Const
from create_bot import orm


class AntiFloodMiddleware(BaseMiddleware):
	
	def __init__(self, max_messages: int = 5, interval: float = 2, block_time: float = 60.0):
		"""
		–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AntiFloodMiddleware.

		:param max_messages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π.
		:param interval: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
		:param block_time: –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
		"""
		super(AntiFloodMiddleware, self).__init__()
		self.max_messages = max_messages
		self.interval = interval
		self.block_time = block_time
		self.user_messages = {}  # user_id: deque of message timestamps
		self.blocked_users = {}  # user_id: unblock_time
		self.lock = asyncio.Lock()  # –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	
	async def __call__(self, handler, event: types.Message, data):
		user_id = event.from_user.id
		current_time = datetime.now(timezone.utc)

		async with self.lock:
			# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			if user_id in self.blocked_users:
				unblock_time = self.blocked_users[user_id]
				if current_time < unblock_time:
					# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
					return
				else:
					# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
					del self.blocked_users[user_id]

			if isinstance(event, types.CallbackQuery):
				return await handler(event, data)

			# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
			if user_id not in self.user_messages:
				self.user_messages[user_id] = deque()

			user_queue = self.user_messages[user_id]
			user_queue.append(current_time)

			# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
			while user_queue and (current_time - user_queue[0]).total_seconds() > self.interval:
				user_queue.popleft()

			# –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
			if len(user_queue) > self.max_messages:
				# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				self.blocked_users[user_id] = current_time + timedelta(seconds = self.block_time)
				# –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
				del self.user_messages[user_id]

				await event.answer(
					text = "üßä –í—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –Ω–∞ 1 –º–∏–Ω—É—Ç—É –∑–∞ —Ñ–ª—É–¥!"
				)

				# –û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
				return

		return await handler(event, data)


class BlacklistMiddleware(BaseMiddleware):
	def __init__(self):
		super().__init__()

	async def __call__(self, handler, event: types.Update, data: dict):
		user_id = self.get_user_id(event)
		if user_id:
			if await orm.is_blacklisted(user_id):
				return

		return await handler(event, data)
	
	def get_user_id(self, event: types.Update):
		return event.from_user.id
